#version 120

#define VFE_FEATURECOUNT 6

#extension GL_ARB_texture_rectangle : enable
#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler3D volume;
uniform vec3 volumeOrigin;
uniform vec3 volumeSize;
uniform float volumeDataShift;
uniform float volumeDataScale;

uniform float viewportX;
uniform float viewportY;
uniform int objectId;

uniform float kernelSize;

struct FeatureVector
{
	vec3 position;
	vec3 vector;
	vec3 direction;
	float magnitude;
	float growth;
	float divergence;
	vec3 curl;
};

struct Feature
{
	bool enabled;
	vec3 examplePos;
	FeatureVector example;
	FeatureVector mask;
	float startThreshold;
	float endThreshold;
	float power;
	vec3 color;
};

uniform Feature userFeatures[VFE_FEATURECOUNT];
uniform int numActiveFeatures;

// Get vector from volume
vec3 getVector(vec3 pos)
{
	vec4 tpos = gl_TextureMatrixInverse[0] * vec4(pos, 1.0);
	vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin) / volumeSize;
	return vec3(volumeDataShift) + volumeDataScale * texture3D(volume, p).xyz;
}

// Linear Jacobian
mat3 jacobian(vec3 pos, float delta, vec3 val)
{
#ifdef NQVTK_RAYCASTER_CENTRALDIFFERENCES
	vec3 dx = (getVector(pos + vec3(0.5 * delta, 0.0, 0.0)) - 
		getVector(pos - vec3(0.5 * delta, 0.0, 0.0))) / delta;
	vec3 dy = (getVector(pos + vec3(0.0, 0.5 * delta, 0.0)) - 
		getVector(pos - vec3(0.0, 0.5 * delta, 0.0))) / delta;
	vec3 dz = (getVector(pos + vec3(0.0, 0.0, 0.5 * delta)) - 
		getVector(pos - vec3(0.0, 0.0, 0.5 * delta))) / delta;
#else
	vec3 dx = (getVector(pos + vec3(delta, 0.0, 0.0)) - val) / delta;
	vec3 dy = (getVector(pos + vec3(0.0, delta, 0.0)) - val) / delta;
	vec3 dz = (getVector(pos + vec3(0.0, 0.0, delta)) - val) / delta;
#endif
	// Add identity (because we should have used pos + vec instead of vec)
	return mat3(dx, dy, dz) + mat3(1.0);
}

// Compute determinant of matrix
float determinant(mat3 m)
{
	return m[0][0] * m[1][1] * m[2][2] 
		+ m[0][1] * m[1][2] * m[2][0] 
		+ m[0][2] * m[1][0] * m[2][1] 
		- m[0][2] * m[1][1] * m[2][0] 
		- m[0][1] * m[1][0] * m[2][2] 
		- m[0][0] * m[1][2] * m[2][1];
}

// Compute trace of matrix
float trace(mat3 m)
{
	return m[0][0] + m[1][1] + m[2][2];
}

// Compute curl given Jacobian
vec3 curl(mat3 j)
{
	return vec3(
		j[2][1] - j[1][2], 
		j[0][2] - j[2][0], 
		j[1][0] - j[0][1]);
}

// Compute growth measure given Jacobian
float growth(mat3 j)
{
	float detJ = abs(determinant(j));
	float g = 0.0;
	if (detJ > 1.0) 
		g = 1.0 - (1.0 / detJ);
	else
		g = detJ - 1.0;
	return g + 0.5;
}

FeatureVector getFeatureVector(vec3 pos)
{
	FeatureVector result;
	result.position = pos;
	result.vector = getVector(pos);
	result.direction = normalize(result.vector);
	result.magnitude = length(result.vector);

	// Compute derivatives
	mat3 j = jacobian(pos, kernelSize, result.vector);
	result.growth = growth(j);
	result.divergence = trace(j);
	result.curl = curl(j);
	return result;
}

float distance(FeatureVector a, FeatureVector b, 
	FeatureVector mask, float power)
{
	float sum = 0.0;
	vec3 v;
	// pos
	v = mask.position * pow(abs(a.position - b.position), vec3(power));
	sum += v.x + v.y + v.z;
	// vector
	v = mask.vector * pow(abs(a.vector - b.vector), vec3(power));
	sum += v.x + v.y + v.z;
	// dir
	v = mask.direction * pow(abs(a.direction - b.direction), vec3(power));
	sum += v.x + v.y + v.z;
	// magnitude
	sum += mask.magnitude * pow(abs(a.magnitude - b.magnitude), power);
	// growth
	sum += mask.growth * pow(abs(a.growth - b.growth), power);
	// divergence
	sum += mask.divergence * pow(abs(a.divergence - b.divergence), power);
	// curl
	v = mask.curl * pow(abs(a.curl - b.curl), vec3(power));
	sum += v.x + v.y + v.z;
	return pow(sum, 1.0/power);
}

float getValue(Feature f, FeatureVector fv)
{
	// Compute distance
	return distance(fv, f.example, f.mask, f.power);
}

float getValue(Feature f, vec3 pos)
{
	// Get FeatureVector
	FeatureVector fv = getFeatureVector(pos);
	// Compute distance
	return getValue(f, fv);
}

bool isInside(Feature f, float val)
{
	return f.startThreshold <= f.endThreshold ? 
		(val > f.startThreshold && val < f.endThreshold) :
		(val < f.endThreshold || val > f.startThreshold);
}

float dotTexture(vec2 c)
{
	return length(mod(c, 20.0) - vec2(10.0)) < 5.0 ? 0.0 : 1.0;
}

void main()
{
	// Screen coords
	vec2 sc = gl_FragCoord.xy;
	sc.x -= viewportX;
	sc.y -= viewportY;

	// Sample volume
	vec3 pos = gl_TexCoord[0].xyz;
	vec3 vector = getVector(pos);

	// Color code direction
	vec4 color;
	color = vec4(normalize(vector) + vec3(0.5), 1.0);

	vec3 dir = normalize(vector);
	vec2 d = dir.xy;
	int n = 0;
	float f = 0.0;
	for (int i = 0; i < 100; ++i)
	{
		vec2 tc = sc + float(i - 25) * d;
		f += dotTexture(tc);
		++n;
	}
	f /= float(n);
	color.rgb *= f;

	// Include magnitude
	float magnitude = length(vector) / (volumeDataScale * 0.5);
	color.rgb = vec3(0.3) + vec3(0.7 * clamp(magnitude, 0.0, 1.0)) * color.rgb;

	// Visualize features
	Feature features[VFE_FEATURECOUNT];
	for (int f = 0; f < VFE_FEATURECOUNT; ++f)
	{
		// Copy feature definition
		if (f < numActiveFeatures)
		{
			features[f] = userFeatures[f];
		}
		else
		{
			features[f].enabled = false;
		}

		// Compute examples
		if (features[f].enabled)
		{
			features[f].example = 
				getFeatureVector(features[f].examplePos);
			
			float value = getValue(features[f], pos);
			if (isInside(features[f], value))
			{
				color.rgb = mix(color.rgb, features[f].color, 0.7);
				// TODO: contours might be nice
			}
		}
	}

	// Use black for positions outside the volume
	vec3 tc = (pos - volumeOrigin) / volumeSize;
	for (int i = 0; i < 3; ++i)
	{
		if (tc[i] < 0.0 || tc[i] > 1.0)
		{
			color = vec4(vec3(0.0), 1.0);
		}
	}

	// Pre-multiply alpha and return
	gl_FragColor = vec4(color.rgb * color.a, color.a);
}
