uniform sampler3D volume;
uniform vec3 volumeOrigin;
uniform vec3 volumeSize;
uniform float volumeDataShift;
uniform float volumeDataScale;

uniform float viewportX;
uniform float viewportY;
uniform int objectId;

float dotTexture(vec2 c)
{
	return length(mod(c, 20.0) - vec2(10.0)) < 5.0 ? 0.0 : 1.0;
}

void main()
{
	// Screen coords
	vec2 sc = gl_FragCoord.xy;
	sc.x -= viewportX;
	sc.y -= viewportY;

	// Sample volume
	vec3 tc = (gl_TexCoord[0].xyz - volumeOrigin) / volumeSize;
	vec3 vector = vec3(volumeDataShift) + volumeDataScale * 
		texture3D(volume, tc).xyz;

	// Color code direction
	vec4 color;
	color = vec4(normalize(vector) + vec3(0.5), 1.0);

	vec3 dir = normalize(vector);
	vec2 d = dir.xy;
	int n = 0;
	float f = 0.0;
	for (int i = 0; i < 100; ++i)
	{
		vec2 tc = sc + float(i - 25) * d;
		f += dotTexture(tc);
		++n;
	}
	f /= float(n);
	color.rgb *= f;

	// Include magnitude
	float magnitude = length(vector);
	color.rgb = vec3(0.3) + vec3(0.7 * (magnitude / (volumeDataScale * 0.5))) * color.rgb;

	// Use gray for positions outside the volume
	for (int i = 0; i < 3; ++i)
	{
		if (tc[i] < 0.0 || tc[i] > 1.0)
		{
			color = vec4(vec3(0.3), 1.0);
		}
	}

	// Pre-multiply alpha and return
	gl_FragColor = vec4(color.rgb * color.a, color.a);
}
