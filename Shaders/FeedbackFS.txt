#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform int viewportHeight;
uniform int viewportWidth;

uniform sampler3D volume;
uniform vec3 volumeOrigin;
uniform vec3 volumeSize;
uniform float volumeDataShift;
uniform float volumeDataScale;

struct FeatureVector
{
	float v[MFE_PROPERTYCOUNT];
};

struct Mask
{
	bool v[MFE_ORIGINALPROPERTYCOUNT];
};

struct FeatureDefinition
{
	bool enabled;
	vec3 examplePos;
	float startThreshold;
	float endThreshold;
	float power;
	float stretch;
	vec3 color;
	Mask mask;
	vec3 backgroundPos;
	bool biasRelativeToMean;
};

uniform float dataTransform[MFE_PROPERTYCOUNT * MFE_ORIGINALPROPERTYCOUNT];
uniform float dataMean[MFE_ORIGINALPROPERTYCOUNT];
uniform float dataMin[MFE_ORIGINALPROPERTYCOUNT];
uniform float dataMax[MFE_ORIGINALPROPERTYCOUNT];
uniform FeatureDefinition userFeature;

struct Feature
{
	int defId; // index into the userFeatures uniform
	FeatureVector example;
	FeatureVector bias;
	float delta;
};

FeatureVector getFeatureVector(vec3 pos)
{
	FeatureVector result;

	vec4 tpos = vec4(pos, 1.0);
	vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin) / volumeSize;
	vec4 comps = vec4(volumeDataShift) + 
		volumeDataScale * texture3D(volume, p);
	for (int i = 0; i < 4; ++i)
	{
		if (i < MFE_PROPERTYCOUNT) result.v[i] = comps[i];
	}

	return result;
}

int getX(float cx)
{
	return int(floor(
		cx * float(MFE_ORIGINALPROPERTYCOUNT) / 
		float(viewportWidth)));
}

int getY(float cy)
{
	return int(floor(cy * 3.0 / float(viewportHeight)));
}

void main()
{
	vec2 coord = gl_FragCoord.xy;
	int x = getX(coord.x);
	int y = getY(coord.y);

	// Compute example
	FeatureVector example = getFeatureVector(userFeature.examplePos);
	// Compute background feature vector
	FeatureVector bg = getFeatureVector(userFeature.backgroundPos);
	if (userFeature.biasRelativeToMean)
	{
		for (int i = 0; i < MFE_PROPERTYCOUNT; ++i)
		{
			bg.v[i] = 0.0;
		}
	}
	// Compute bias vector
	FeatureVector bias;
	float l = 0.0;
	for (int i = 0; i < MFE_PROPERTYCOUNT; ++i)
	{
		// Bias towards difference
		bias.v[i] = example.v[i] - bg.v[i];
		// Compute length
		l += bias.v[i] * bias.v[i];
	}
	l = sqrt(l);
	// Normalize
	l = 1.0 / l;
	for (int i = 0; i < MFE_PROPERTYCOUNT; ++i)
	{
		bias.v[i] = bias.v[i] * l;
	}

	FeatureVector fv;
	if (y == 2)
	{
		fv = bg;
	}
	else if (y == 1)
	{
		fv = example;
	}
	else
	{
		fv = bias;
	}
	// Project the featurevector to the original space
	float v = 0.0;
	for (int i = 0; i < MFE_PROPERTYCOUNT; ++i)
	{
		v += fv.v[i] * dataTransform[x + i * MFE_ORIGINALPROPERTYCOUNT];
	}

	if (y > 0)
	{
		// Scale relative to min and max for this property, 
		// while keeping the mean at 0
		float absmax = max(abs(dataMean[x] - dataMin[x]), 
			abs(dataMax[x] - dataMean[x]));
		v /= absmax;
		// Now shift to [0..1]
		v = 0.5 + 0.5 * v;
		gl_FragColor = vec4(mix(vec3(0.0, 0.5, 1.0), vec3(1.0, 0.5, 0.0), v), 1.0);
	}
	else
	{
		// Bias vector is visualized with absolute values
		v = abs(v);
		gl_FragColor = vec4(mix(vec3(0.0), vec3(1.0), v), 1.0);
	}

	// Masked properties
	if (!userFeature.mask.v[x]) gl_FragColor.rgb *= 0.4;
	// Contours
	if (x != getX(coord.x + 1) || y != getY(coord.y + 1) || coord.x < 1.0 || coord.y < 1.0)
		gl_FragColor = vec4(vec3(0.3), 1.0);
}
